[
  {
    "objectID": "example_1.html",
    "href": "example_1.html",
    "title": "Example #1",
    "section": "",
    "text": "Dash Apps\nThe examples in folder_dash are the standard demo apps. They can be run from the command line and are served through local host\n ➜  python_dash git:(main) ✗ python3 data_table_py_callback.py\nDash is running on http://127.0.0.1:8050/\n\n * Serving Flask app 'data_table_py_callback'\n * Debug mode: on\n\nIt looks like this and seems to work as expected:\n\n\n\nPython App with Callbacks\n\n\n\n\nDash within Quarto\nRunning a Dash app within Quarto was possible with ugly hacks but it isn’t pretty. May not work properly and is not supported. Simply a code exploration to be ignored. Kept in the same way that a journal of negative results is a good thing.\nWhen Dash server is running on localhost it looks like this:\n\n\n\nDash within Quarto\n\n\nie. is squashed within the page\n\n\nShow Code\n\n\n# Import packages\nfrom dash import Dash, html, dash_table, dcc, callback, Output, Input\nimport pandas as pd\nimport plotly.express as px\n\n# Incorporate data\n#df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv')\n\n# Initialize the app\napp = Dash(__name__)\n\n# App layout\napp.layout = html.Div([\n    html.Div(children='My First App with Data, Graph, and Controls'),\n    html.Hr(),\n    dcc.RadioItems(options=['pop', 'lifeExp', 'gdpPercap'], value='lifeExp', id='controls-and-radio-item'),\n    dash_table.DataTable(data=pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv').to_dict('records'), page_size=6),\n    dcc.Graph(figure={}, id='controls-and-graph')\n])\n\n# Add controls to build the interaction\n@callback(\n    Output(component_id='controls-and-graph', component_property='figure'),\n    Input(component_id='controls-and-radio-item', component_property='value')\n)\ndef update_graph(col_chosen):\n    import plotly.express as px\n    import pandas as pd\n    fig = px.histogram(pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminder2007.csv').to_dict('records'), x='continent', y=col_chosen, histfunc='avg')\n    return fig\n\n\n\nif __name__ == '__main__': app.run(debug=True) # Run the app"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About me"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dash etc.",
    "section": "",
    "text": "The purpose is to investigate Dash, Observable JS and similar interactive technologies for data exploration.\nDash is available for Python, but not yet ready at the time of writing\nExample #1 is with Dash\nExample #2 and #3 work with Observable JS"
  },
  {
    "objectID": "example_4.html",
    "href": "example_4.html",
    "title": "Example #4",
    "section": "",
    "text": "https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html\n# code to run shiny examples\ne.g. \n#library(shiny)\n#runExample(\"01_hello\")"
  }
]